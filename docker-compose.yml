version: '3.8'

services:
  # =====================================================
  # BACKEND API SERVICE
  # =====================================================
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: tourist-safety-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      # Database
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # External APIs
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FCM_SERVER_KEY: ${FCM_SERVER_KEY}
      # Blockchain
      POLYGON_RPC_URL: ${POLYGON_RPC_URL}
      PRIVATE_KEY: ${PRIVATE_KEY}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      # CORS
      CORS_ORIGIN: http://localhost:3000,http://localhost:19006
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - tourist-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # RAG SERVICE (AI/ML)
  # =====================================================
  rag-service:
    build:
      context: .
      dockerfile: ./services/rag-service/Dockerfile
    container_name: tourist-safety-rag
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      RAG_SERVICE_PORT: 3002
      # Database
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4-turbo-preview}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      # Vector Database
      VECTOR_DB_TYPE: ${VECTOR_DB_TYPE:-supabase}
      EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-1536}
      SIMILARITY_THRESHOLD: ${SIMILARITY_THRESHOLD:-0.7}
      # CORS
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    volumes:
      - ./services/rag-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - tourist-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # POSTGRESQL DATABASE (if not using Supabase cloud)
  # =====================================================
  postgres:
    image: postgis/postgis:15-3.3
    container_name: tourist-safety-postgres
    environment:
      POSTGRES_DB: tourist_safety
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - tourist-safety-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================================
  # REDIS (Caching & Session Store)
  # =====================================================
  redis:
    image: redis:7-alpine
    container_name: tourist-safety-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tourist-safety-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # NGINX REVERSE PROXY
  # =====================================================
  nginx:
    image: nginx:alpine
    container_name: tourist-safety-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - rag-service
    networks:
      - tourist-safety-network
    restart: unless-stopped

  # =====================================================
  # MONITORING & OBSERVABILITY
  # =====================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: tourist-safety-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tourist-safety-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: tourist-safety-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tourist-safety-network
    restart: unless-stopped

# =====================================================
# NETWORKS
# =====================================================
networks:
  tourist-safety-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =====================================================
# VOLUMES
# =====================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local